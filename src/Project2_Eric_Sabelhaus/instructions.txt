Evaluating and comparing efficiency of sorting algorithms 
 
Requirements: Compare the efficiency of Selection Sort, 
Insertion Sort and Quicksort.
 
Approach: 

Starting from your second homework assignment, 
evaluate the efficiency of Selection Sort, Insertion Sort 
and Quicksort. For doing this, you should evaluate their 
corresponding implementations (code available under Content -> 
Previous Course Learning Modules -> CMSC 230 Modules -> 
Module 6: Sorting and Hashing -> I Simple Sorts -> C 
Selection Sort and D Insertion Sort; and in textbook Sorting 
Data Structures and Algorithms Using Java by William 
McAllister, Chapter 8 - 8.3.5 Quicksort) in each of the 3 
cases (best, worst, and average) and count the number of 
operations performed (assignments, comparisons, and overall, 
separately). For counting them, you need to add in the right 
place specific statements to increment the counters for 
assignments and/or comparisons, wherever needed (actually 
you have to add for Quicksort only, in case you received no 
feedback for review/update/change the counters from the 
second homework assignment).

Draw charts to show how the running time (estimated in 
numbers of assignments A(n), comparisons C(n), and overall 
time T(n)=A(n) + C(n)) growths as the size of the input data 
n is growing.  To draw the charts, vary the input size (n) 
between 100 and 1000, with an increment of maximum 100. For 
each size, generate the appropriate input sequence (best, 
worst, or average) for the specific sorting method (be aware: 
best/worst cases are not necessary the same for the three 
algorithms), run it, and store the values (A(n), C(n),  T(n)).

For the average case, you have to repeat the measurements m 
times (m=5 should suffice) and report their average. Moreover,
for the average case, make sure you always use the same input 
sequence for all three sorting methods for a fair comparison.

For each of the analyzed cases, generate charts which compare 
the three methods; use different charts for the number of 
comparisons, number of assignments and total number of 
operations. Name your charts and curves on each chart 
appropriately (that is, specify what the chart/curve represents).
 
Deliverables: 

You should submit 
(1) all the source (.java) files, 
(2) an output sample (screenshot showing program execution and the 
results of your testing, to show the methods are actually sorting) 
(3) the diagrams (the easiest way to draw them is by using 
Microsoft Excel Worksheet) and 
(4) a document file describing your solution. 
The solution description document should include the following elements: 
justification for the added statements (the ones that increment the counters), 
the choice for the input data for best and worst cases for each algorithm, with justification, 
the interpretation of the diagrams and 
lessons learned. 
The size of the document should be of 2-4 pages, single spaced, 
font size 12. All solution description elements should be 
properly formatted using APA style.

Wrapp all the files in a single .zip archive and name it 
Project2_your_name.zip (if I were you, it would be Project2_Rodica_Potolea.zip).


